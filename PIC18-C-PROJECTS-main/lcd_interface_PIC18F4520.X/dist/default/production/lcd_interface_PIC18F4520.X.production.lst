

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sun Oct 17 18:59:31 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    20  0000                     
    21                           ; Version 2.20
    22                           ; Generated 12/02/2020 GMT
    23                           ; 
    24                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4520 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     _TRISD	set	3989
    56  0000                     _RD2	set	31770
    57  0000                     _RD0	set	31768
    58  0000                     _RD7	set	31775
    59  0000                     _RD6	set	31774
    60  0000                     _RD5	set	31773
    61  0000                     _RD4	set	31772
    62                           
    63                           	psect	smallconst
    64  000600                     __psmallconst:
    65                           	callstack 0
    66  000600  00                 	db	0
    67  000601                     STR_1:
    68  000601  45                 	db	69	;'E'
    69  000602  6E                 	db	110	;'n'
    70  000603  65                 	db	101	;'e'
    71  000604  73                 	db	115	;'s'
    72  000605  20                 	db	32
    73  000606  4D                 	db	77	;'M'
    74  000607  65                 	db	101	;'e'
    75  000608  72                 	db	114	;'r'
    76  000609  63                 	db	99	;'c'
    77  00060A  61                 	db	97	;'a'
    78  00060B  6E                 	db	110	;'n'
    79  00060C  00                 	db	0
    80  00060D                     STR_2:
    81  00060D  31                 	db	49	;'1'
    82  00060E  37                 	db	55	;'7'
    83  00060F  2E                 	db	46
    84  000610  31                 	db	49	;'1'
    85  000611  30                 	db	48	;'0'
    86  000612  2E                 	db	46
    87  000613  32                 	db	50	;'2'
    88  000614  30                 	db	48	;'0'
    89  000615  32                 	db	50	;'2'
    90  000616  31                 	db	49	;'1'
    91  000617  00                 	db	0
    92  000618  00                 	db	0	; dummy byte at the end
    93  0000                     
    94                           ; #config settings
    95                           
    96                           	psect	cinit
    97  000888                     __pcinit:
    98                           	callstack 0
    99  000888                     start_initialization:
   100                           	callstack 0
   101  000888                     __initialization:
   102                           	callstack 0
   103  000888                     end_of_initialization:
   104                           	callstack 0
   105  000888                     __end_of__initialization:
   106                           	callstack 0
   107  000888  0E00               	movlw	low (__Lsmallconst shr (0+16))
   108  00088A  6EF8               	movwf	tblptru,c
   109  00088C  0E06               	movlw	high __Lsmallconst
   110  00088E  6EF7               	movwf	tblptrh,c
   111  000890  0100               	movlb	0
   112  000892  EFDE  F003         	goto	_main	;jump to C main() function
   113                           
   114                           	psect	cstackCOMRAM
   115  000001                     __pcstackCOMRAM:
   116                           	callstack 0
   117  000001                     Lcd_SetBit@data_bit:
   118                           	callstack 0
   119                           
   120                           ; 1 bytes @ 0x0
   121  000001                     	ds	1
   122  000002                     ??_Lcd_Cmd:
   123  000002                     Lcd_Print_Char@Lower_Nibble:
   124                           	callstack 0
   125                           
   126                           ; 1 bytes @ 0x1
   127  000002                     	ds	1
   128  000003                     Lcd_Cmd@a:
   129                           	callstack 0
   130  000003                     Lcd_Print_Char@Upper_Nibble:
   131                           	callstack 0
   132                           
   133                           ; 1 bytes @ 0x2
   134  000003                     	ds	1
   135  000004                     ??_Lcd_Start:
   136  000004                     Lcd_Set_Cursor@b:
   137                           	callstack 0
   138  000004                     Lcd_Print_Char@i:
   139                           	callstack 0
   140                           
   141                           ; 2 bytes @ 0x3
   142  000004                     	ds	1
   143  000005                     Lcd_Set_Cursor@a:
   144                           	callstack 0
   145                           
   146                           ; 1 bytes @ 0x4
   147  000005                     	ds	1
   148  000006                     Lcd_Set_Cursor@z:
   149                           	callstack 0
   150  000006                     Lcd_Print_Char@i_90:
   151                           	callstack 0
   152                           
   153                           ; 2 bytes @ 0x5
   154  000006                     	ds	1
   155  000007                     Lcd_Set_Cursor@y:
   156                           	callstack 0
   157                           
   158                           ; 1 bytes @ 0x6
   159  000007                     	ds	1
   160  000008                     Lcd_Set_Cursor@temp:
   161                           	callstack 0
   162  000008                     Lcd_Print_Char@data:
   163                           	callstack 0
   164                           
   165                           ; 1 bytes @ 0x7
   166  000008                     	ds	1
   167  000009                     Lcd_Print_String@a:
   168                           	callstack 0
   169                           
   170                           ; 2 bytes @ 0x8
   171  000009                     	ds	2
   172  00000B                     ??_Lcd_Print_String:
   173                           
   174                           ; 1 bytes @ 0xA
   175  00000B                     	ds	2
   176  00000D                     Lcd_Print_String@i:
   177                           	callstack 0
   178                           
   179                           ; 2 bytes @ 0xC
   180  00000D                     	ds	2
   181  00000F                     ??_main:
   182                           
   183                           ; 1 bytes @ 0xE
   184  00000F                     	ds	2
   185                           
   186 ;;
   187 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   188 ;;
   189 ;; *************** function _main *****************
   190 ;; Defined at:
   191 ;;		line 14 in file "main.c"
   192 ;; Parameters:    Size  Location     Type
   193 ;;		None
   194 ;; Auto vars:     Size  Location     Type
   195 ;;  a               2    0        unsigned int 
   196 ;; Return value:  Size  Location     Type
   197 ;;                  1    wreg      void 
   198 ;; Registers used:
   199 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   200 ;; Tracked objects:
   201 ;;		On entry : 0/0
   202 ;;		On exit  : 0/0
   203 ;;		Unchanged: 0/0
   204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   205 ;;      Params:         0       0       0       0       0       0       0
   206 ;;      Locals:         0       0       0       0       0       0       0
   207 ;;      Temps:          2       0       0       0       0       0       0
   208 ;;      Totals:         2       0       0       0       0       0       0
   209 ;;Total ram usage:        2 bytes
   210 ;; Hardware stack levels required when called: 3
   211 ;; This function calls:
   212 ;;		_Lcd_Clear
   213 ;;		_Lcd_Print_String
   214 ;;		_Lcd_Set_Cursor
   215 ;;		_Lcd_Start
   216 ;; This function is called by:
   217 ;;		Startup code after reset
   218 ;; This function uses a non-reentrant model
   219 ;;
   220                           
   221                           	psect	text0
   222  0007BC                     __ptext0:
   223                           	callstack 0
   224  0007BC                     _main:
   225                           	callstack 28
   226  0007BC                     
   227                           ;main.c: 16:     unsigned int a;;main.c: 17:     TRISD = 0x00;
   228  0007BC  0E00               	movlw	0
   229  0007BE  6E95               	movwf	149,c	;volatile
   230  0007C0                     
   231                           ;main.c: 18:     Lcd_Start();
   232  0007C0  EC7E  F003         	call	_Lcd_Start	;wreg free
   233  0007C4                     l915:
   234                           
   235                           ;main.c: 20:     {;main.c: 21:         Lcd_Clear();
   236  0007C4  EC4B  F004         	call	_Lcd_Clear	;wreg free
   237  0007C8                     
   238                           ;main.c: 22:         Lcd_Set_Cursor(1,1);
   239  0007C8  0E01               	movlw	1
   240  0007CA  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   241  0007CC  0E01               	movlw	1
   242  0007CE  EC4B  F003         	call	_Lcd_Set_Cursor
   243  0007D2                     
   244                           ;main.c: 23:         Lcd_Print_String("Enes Mercan");
   245  0007D2  0E01               	movlw	low STR_1
   246  0007D4  6E09               	movwf	Lcd_Print_String@a^0,c
   247  0007D6  0E06               	movlw	high STR_1
   248  0007D8  6E0A               	movwf	(Lcd_Print_String@a+1)^0,c
   249  0007DA  EC09  F004         	call	_Lcd_Print_String	;wreg free
   250  0007DE                     
   251                           ;main.c: 24:         Lcd_Set_Cursor(2,1);
   252  0007DE  0E01               	movlw	1
   253  0007E0  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   254  0007E2  0E02               	movlw	2
   255  0007E4  EC4B  F003         	call	_Lcd_Set_Cursor
   256  0007E8                     
   257                           ;main.c: 25:         Lcd_Print_String("17.10.2021");
   258  0007E8  0E0D               	movlw	low STR_2
   259  0007EA  6E09               	movwf	Lcd_Print_String@a^0,c
   260  0007EC  0E06               	movlw	high STR_2
   261  0007EE  6E0A               	movwf	(Lcd_Print_String@a+1)^0,c
   262  0007F0  EC09  F004         	call	_Lcd_Print_String	;wreg free
   263  0007F4                     
   264                           ;main.c: 26:         _delay((unsigned long)((2000)*(20000000/4000.0)));
   265  0007F4  0E33               	movlw	51
   266  0007F6  6E10               	movwf	(??_main+1)^0,c
   267  0007F8  0EBB               	movlw	187
   268  0007FA  6E0F               	movwf	??_main^0,c
   269  0007FC  0EE0               	movlw	224
   270  0007FE                     u137:
   271  0007FE  2EE8               	decfsz	wreg,f,c
   272  000800  D7FE               	bra	u137
   273  000802  2E0F               	decfsz	??_main^0,f,c
   274  000804  D7FC               	bra	u137
   275  000806  2E10               	decfsz	(??_main+1)^0,f,c
   276  000808  D7FA               	bra	u137
   277  00080A  EFE2  F003         	goto	l915
   278  00080E  EF00  F000         	goto	start
   279  000812                     __end_of_main:
   280                           	callstack 0
   281                           
   282 ;; *************** function _Lcd_Start *****************
   283 ;; Defined at:
   284 ;;		line 83 in file "lcd.c"
   285 ;; Parameters:    Size  Location     Type
   286 ;;		None
   287 ;; Auto vars:     Size  Location     Type
   288 ;;  i               2    0        int 
   289 ;; Return value:  Size  Location     Type
   290 ;;                  1    wreg      void 
   291 ;; Registers used:
   292 ;;		wreg, status,2, cstack
   293 ;; Tracked objects:
   294 ;;		On entry : 0/0
   295 ;;		On exit  : 0/0
   296 ;;		Unchanged: 0/0
   297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   298 ;;      Params:         0       0       0       0       0       0       0
   299 ;;      Locals:         0       0       0       0       0       0       0
   300 ;;      Temps:          1       0       0       0       0       0       0
   301 ;;      Totals:         1       0       0       0       0       0       0
   302 ;;Total ram usage:        1 bytes
   303 ;; Hardware stack levels used: 1
   304 ;; Hardware stack levels required when called: 2
   305 ;; This function calls:
   306 ;;		_Lcd_Cmd
   307 ;;		_Lcd_SetBit
   308 ;; This function is called by:
   309 ;;		_main
   310 ;; This function uses a non-reentrant model
   311 ;;
   312                           
   313                           	psect	text1
   314  0006FC                     __ptext1:
   315                           	callstack 0
   316  0006FC                     _Lcd_Start:
   317                           	callstack 28
   318  0006FC                     
   319                           ;lcd.c: 85:   Lcd_SetBit(0x00);
   320  0006FC  0E00               	movlw	0
   321  0006FE  ECB0  F003         	call	_Lcd_SetBit
   322  000702                     
   323                           ;lcd.c: 87:   Lcd_Cmd(0x03);
   324  000702  0E03               	movlw	3
   325  000704  EC34  F004         	call	_Lcd_Cmd
   326  000708                     
   327                           ;lcd.c: 88:  _delay((unsigned long)((5)*(20000000/4000.0)));
   328  000708  0E21               	movlw	33
   329  00070A  6E04               	movwf	??_Lcd_Start^0,c
   330  00070C  0E76               	movlw	118
   331  00070E                     u147:
   332  00070E  2EE8               	decfsz	wreg,f,c
   333  000710  D7FE               	bra	u147
   334  000712  2E04               	decfsz	??_Lcd_Start^0,f,c
   335  000714  D7FC               	bra	u147
   336  000716  D000               	nop2	
   337  000718                     
   338                           ;lcd.c: 89:   Lcd_Cmd(0x03);
   339  000718  0E03               	movlw	3
   340  00071A  EC34  F004         	call	_Lcd_Cmd
   341                           
   342                           ;lcd.c: 90:  _delay((unsigned long)((11)*(20000000/4000.0)));
   343  00071E  0E48               	movlw	72
   344  000720  6E04               	movwf	??_Lcd_Start^0,c
   345  000722  0E6C               	movlw	108
   346  000724                     u157:
   347  000724  2EE8               	decfsz	wreg,f,c
   348  000726  D7FE               	bra	u157
   349  000728  2E04               	decfsz	??_Lcd_Start^0,f,c
   350  00072A  D7FC               	bra	u157
   351  00072C  D000               	nop2	
   352  00072E                     
   353                           ;lcd.c: 91:   Lcd_Cmd(0x03);
   354  00072E  0E03               	movlw	3
   355  000730  EC34  F004         	call	_Lcd_Cmd
   356  000734                     
   357                           ;lcd.c: 92:   Lcd_Cmd(0x02);
   358  000734  0E02               	movlw	2
   359  000736  EC34  F004         	call	_Lcd_Cmd
   360  00073A                     
   361                           ;lcd.c: 93:   Lcd_Cmd(0x02);
   362  00073A  0E02               	movlw	2
   363  00073C  EC34  F004         	call	_Lcd_Cmd
   364  000740                     
   365                           ;lcd.c: 94:   Lcd_Cmd(0x08);
   366  000740  0E08               	movlw	8
   367  000742  EC34  F004         	call	_Lcd_Cmd
   368  000746                     
   369                           ;lcd.c: 95:   Lcd_Cmd(0x00);
   370  000746  0E00               	movlw	0
   371  000748  EC34  F004         	call	_Lcd_Cmd
   372  00074C                     
   373                           ;lcd.c: 96:   Lcd_Cmd(0x0C);
   374  00074C  0E0C               	movlw	12
   375  00074E  EC34  F004         	call	_Lcd_Cmd
   376  000752                     
   377                           ;lcd.c: 97:   Lcd_Cmd(0x00);
   378  000752  0E00               	movlw	0
   379  000754  EC34  F004         	call	_Lcd_Cmd
   380  000758                     
   381                           ;lcd.c: 98:   Lcd_Cmd(0x06);
   382  000758  0E06               	movlw	6
   383  00075A  EC34  F004         	call	_Lcd_Cmd
   384  00075E  0012               	return		;funcret
   385  000760                     __end_of_Lcd_Start:
   386                           	callstack 0
   387                           
   388 ;; *************** function _Lcd_Set_Cursor *****************
   389 ;; Defined at:
   390 ;;		line 62 in file "lcd.c"
   391 ;; Parameters:    Size  Location     Type
   392 ;;  a               1    wreg     unsigned char 
   393 ;;  b               1    3[COMRAM] unsigned char 
   394 ;; Auto vars:     Size  Location     Type
   395 ;;  a               1    4[COMRAM] unsigned char 
   396 ;;  temp            1    7[COMRAM] unsigned char 
   397 ;;  y               1    6[COMRAM] unsigned char 
   398 ;;  z               1    5[COMRAM] unsigned char 
   399 ;; Return value:  Size  Location     Type
   400 ;;                  1    wreg      void 
   401 ;; Registers used:
   402 ;;		wreg, status,2, status,0, cstack
   403 ;; Tracked objects:
   404 ;;		On entry : 0/0
   405 ;;		On exit  : 0/0
   406 ;;		Unchanged: 0/0
   407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   408 ;;      Params:         1       0       0       0       0       0       0
   409 ;;      Locals:         4       0       0       0       0       0       0
   410 ;;      Temps:          0       0       0       0       0       0       0
   411 ;;      Totals:         5       0       0       0       0       0       0
   412 ;;Total ram usage:        5 bytes
   413 ;; Hardware stack levels used: 1
   414 ;; Hardware stack levels required when called: 2
   415 ;; This function calls:
   416 ;;		_Lcd_Cmd
   417 ;; This function is called by:
   418 ;;		_main
   419 ;; This function uses a non-reentrant model
   420 ;;
   421                           
   422                           	psect	text2
   423  000696                     __ptext2:
   424                           	callstack 0
   425  000696                     _Lcd_Set_Cursor:
   426                           	callstack 28
   427                           
   428                           ;incstack = 0
   429                           ;Lcd_Set_Cursor@a stored from wreg
   430  000696  6E05               	movwf	Lcd_Set_Cursor@a^0,c
   431  000698                     
   432                           ;lcd.c: 62: void Lcd_Set_Cursor(char a, char b);lcd.c: 63: {;lcd.c: 64:  char temp,z,y;;
      +                          lcd.c: 65:  if(a== 1)
   433  000698  0405               	decf	Lcd_Set_Cursor@a^0,w,c
   434  00069A  A4D8               	btfss	status,2,c
   435  00069C  EF52  F003         	goto	u101
   436  0006A0  EF54  F003         	goto	u100
   437  0006A4                     u101:
   438  0006A4  EF65  F003         	goto	l895
   439  0006A8                     u100:
   440  0006A8                     
   441                           ;lcd.c: 66:  {;lcd.c: 67:    temp = 0x80 + b - 1;
   442  0006A8  5004               	movf	Lcd_Set_Cursor@b^0,w,c
   443  0006AA  0F7F               	addlw	127
   444  0006AC  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
   445                           
   446                           ;lcd.c: 68:   z = temp>>4;
   447  0006AE  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
   448  0006B0  0B0F               	andlw	15
   449  0006B2  6E06               	movwf	Lcd_Set_Cursor@z^0,c
   450                           
   451                           ;lcd.c: 69:   y = temp & 0x0F;
   452  0006B4  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
   453  0006B6  0B0F               	andlw	15
   454  0006B8  6E07               	movwf	Lcd_Set_Cursor@y^0,c
   455  0006BA                     
   456                           ;lcd.c: 70:   Lcd_Cmd(z);
   457  0006BA  5006               	movf	Lcd_Set_Cursor@z^0,w,c
   458  0006BC  EC34  F004         	call	_Lcd_Cmd
   459  0006C0                     
   460                           ;lcd.c: 71:   Lcd_Cmd(y);
   461  0006C0  5007               	movf	Lcd_Set_Cursor@y^0,w,c
   462  0006C2  EC34  F004         	call	_Lcd_Cmd
   463                           
   464                           ;lcd.c: 72:  }
   465  0006C6  EF7D  F003         	goto	l59
   466  0006CA                     l895:
   467  0006CA  0E02               	movlw	2
   468  0006CC  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
   469  0006CE  A4D8               	btfss	status,2,c
   470  0006D0  EF6C  F003         	goto	u111
   471  0006D4  EF6E  F003         	goto	u110
   472  0006D8                     u111:
   473  0006D8  EF7D  F003         	goto	l59
   474  0006DC                     u110:
   475  0006DC                     
   476                           ;lcd.c: 74:  {;lcd.c: 75:   temp = 0xC0 + b - 1;
   477  0006DC  5004               	movf	Lcd_Set_Cursor@b^0,w,c
   478  0006DE  0FBF               	addlw	191
   479  0006E0  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
   480                           
   481                           ;lcd.c: 76:   z = temp>>4;
   482  0006E2  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
   483  0006E4  0B0F               	andlw	15
   484  0006E6  6E06               	movwf	Lcd_Set_Cursor@z^0,c
   485                           
   486                           ;lcd.c: 77:   y = temp & 0x0F;
   487  0006E8  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
   488  0006EA  0B0F               	andlw	15
   489  0006EC  6E07               	movwf	Lcd_Set_Cursor@y^0,c
   490  0006EE                     
   491                           ;lcd.c: 78:   Lcd_Cmd(z);
   492  0006EE  5006               	movf	Lcd_Set_Cursor@z^0,w,c
   493  0006F0  EC34  F004         	call	_Lcd_Cmd
   494  0006F4                     
   495                           ;lcd.c: 79:   Lcd_Cmd(y);
   496  0006F4  5007               	movf	Lcd_Set_Cursor@y^0,w,c
   497  0006F6  EC34  F004         	call	_Lcd_Cmd
   498  0006FA                     l59:
   499  0006FA  0012               	return		;funcret
   500  0006FC                     __end_of_Lcd_Set_Cursor:
   501                           	callstack 0
   502                           
   503 ;; *************** function _Lcd_Print_String *****************
   504 ;; Defined at:
   505 ;;		line 117 in file "lcd.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;  a               2    8[COMRAM] PTR unsigned char 
   508 ;;		 -> STR_2(11), STR_1(12), 
   509 ;; Auto vars:     Size  Location     Type
   510 ;;  i               2   12[COMRAM] int 
   511 ;; Return value:  Size  Location     Type
   512 ;;                  1    wreg      void 
   513 ;; Registers used:
   514 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   515 ;; Tracked objects:
   516 ;;		On entry : 0/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   520 ;;      Params:         2       0       0       0       0       0       0
   521 ;;      Locals:         2       0       0       0       0       0       0
   522 ;;      Temps:          2       0       0       0       0       0       0
   523 ;;      Totals:         6       0       0       0       0       0       0
   524 ;;Total ram usage:        6 bytes
   525 ;; Hardware stack levels used: 1
   526 ;; Hardware stack levels required when called: 2
   527 ;; This function calls:
   528 ;;		_Lcd_Print_Char
   529 ;; This function is called by:
   530 ;;		_main
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534                           	psect	text3
   535  000812                     __ptext3:
   536                           	callstack 0
   537  000812                     _Lcd_Print_String:
   538                           	callstack 28
   539  000812                     
   540                           ;lcd.c: 117: void Lcd_Print_String(char *a);lcd.c: 118: {;lcd.c: 119:  int i;;lcd.c: 120
      +                          :  for(i=0;a[i]!='\0';i++)
   541  000812  0E00               	movlw	0
   542  000814  6E0E               	movwf	(Lcd_Print_String@i+1)^0,c
   543  000816  0E00               	movlw	0
   544  000818  6E0D               	movwf	Lcd_Print_String@i^0,c
   545  00081A  EF1F  F004         	goto	l909
   546  00081E                     l905:
   547                           
   548                           ;lcd.c: 121:     Lcd_Print_Char(a[i]);
   549  00081E  500D               	movf	Lcd_Print_String@i^0,w,c
   550  000820  2409               	addwf	Lcd_Print_String@a^0,w,c
   551  000822  6E0B               	movwf	??_Lcd_Print_String^0,c
   552  000824  500E               	movf	(Lcd_Print_String@i+1)^0,w,c
   553  000826  200A               	addwfc	(Lcd_Print_String@a+1)^0,w,c
   554  000828  6E0C               	movwf	(??_Lcd_Print_String+1)^0,c
   555  00082A  C00B  FFF6         	movff	??_Lcd_Print_String,tblptrl
   556  00082E  C00C  FFF7         	movff	??_Lcd_Print_String+1,tblptrh
   557  000832                     	if	0	;tblptru may be non-zero
   558  000832                     	endif
   559  000832                     	if	0	;tblptru may be non-zero
   560  000832                     	endif
   561  000832  0008               	tblrd		*
   562  000834  50F5               	movf	tablat,w,c
   563  000836  EC0D  F003         	call	_Lcd_Print_Char
   564  00083A  4A0D               	infsnz	Lcd_Print_String@i^0,f,c
   565  00083C  2A0E               	incf	(Lcd_Print_String@i+1)^0,f,c
   566  00083E                     l909:
   567  00083E  500D               	movf	Lcd_Print_String@i^0,w,c
   568  000840  2409               	addwf	Lcd_Print_String@a^0,w,c
   569  000842  6E0B               	movwf	??_Lcd_Print_String^0,c
   570  000844  500E               	movf	(Lcd_Print_String@i+1)^0,w,c
   571  000846  200A               	addwfc	(Lcd_Print_String@a+1)^0,w,c
   572  000848  6E0C               	movwf	(??_Lcd_Print_String+1)^0,c
   573  00084A  C00B  FFF6         	movff	??_Lcd_Print_String,tblptrl
   574  00084E  C00C  FFF7         	movff	??_Lcd_Print_String+1,tblptrh
   575  000852                     	if	0	;tblptru may be non-zero
   576  000852                     	endif
   577  000852                     	if	0	;tblptru may be non-zero
   578  000852                     	endif
   579  000852  0008               	tblrd		*
   580  000854  50F5               	movf	tablat,w,c
   581  000856  0900               	iorlw	0
   582  000858  A4D8               	btfss	status,2,c
   583  00085A  EF31  F004         	goto	u121
   584  00085E  EF33  F004         	goto	u120
   585  000862                     u121:
   586  000862  EF0F  F004         	goto	l905
   587  000866                     u120:
   588  000866  0012               	return		;funcret
   589  000868                     __end_of_Lcd_Print_String:
   590                           	callstack 0
   591                           
   592 ;; *************** function _Lcd_Print_Char *****************
   593 ;; Defined at:
   594 ;;		line 101 in file "lcd.c"
   595 ;; Parameters:    Size  Location     Type
   596 ;;  data            1    wreg     unsigned char 
   597 ;; Auto vars:     Size  Location     Type
   598 ;;  data            1    7[COMRAM] unsigned char 
   599 ;;  i               2    5[COMRAM] int 
   600 ;;  i               2    3[COMRAM] int 
   601 ;;  Upper_Nibble    1    2[COMRAM] unsigned char 
   602 ;;  Lower_Nibble    1    1[COMRAM] unsigned char 
   603 ;; Return value:  Size  Location     Type
   604 ;;                  1    wreg      void 
   605 ;; Registers used:
   606 ;;		wreg, status,2, status,0, cstack
   607 ;; Tracked objects:
   608 ;;		On entry : 0/0
   609 ;;		On exit  : 0/0
   610 ;;		Unchanged: 0/0
   611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   612 ;;      Params:         0       0       0       0       0       0       0
   613 ;;      Locals:         7       0       0       0       0       0       0
   614 ;;      Temps:          0       0       0       0       0       0       0
   615 ;;      Totals:         7       0       0       0       0       0       0
   616 ;;Total ram usage:        7 bytes
   617 ;; Hardware stack levels used: 1
   618 ;; Hardware stack levels required when called: 1
   619 ;; This function calls:
   620 ;;		_Lcd_SetBit
   621 ;; This function is called by:
   622 ;;		_Lcd_Print_String
   623 ;; This function uses a non-reentrant model
   624 ;;
   625                           
   626                           	psect	text4
   627  00061A                     __ptext4:
   628                           	callstack 0
   629  00061A                     _Lcd_Print_Char:
   630                           	callstack 28
   631                           
   632                           ;incstack = 0
   633                           ;Lcd_Print_Char@data stored from wreg
   634  00061A  6E08               	movwf	Lcd_Print_Char@data^0,c
   635  00061C                     
   636                           ;lcd.c: 101: void Lcd_Print_Char(char data);lcd.c: 102: {;lcd.c: 103:    char Lower_Nibb
      +                          le,Upper_Nibble;;lcd.c: 104:    Lower_Nibble = data&0x0F;
   637  00061C  5008               	movf	Lcd_Print_Char@data^0,w,c
   638  00061E  0B0F               	andlw	15
   639  000620  6E02               	movwf	Lcd_Print_Char@Lower_Nibble^0,c
   640                           
   641                           ;lcd.c: 105:    Upper_Nibble = data&0xF0;
   642  000622  5008               	movf	Lcd_Print_Char@data^0,w,c
   643  000624  0BF0               	andlw	240
   644  000626  6E03               	movwf	Lcd_Print_Char@Upper_Nibble^0,c
   645  000628                     
   646                           ;lcd.c: 106:    RD0 = 1;
   647  000628  8083               	bsf	3971,0,c	;volatile
   648  00062A                     
   649                           ;lcd.c: 107:    Lcd_SetBit(Upper_Nibble>>4);
   650  00062A  3803               	swapf	Lcd_Print_Char@Upper_Nibble^0,w,c
   651  00062C  0B0F               	andlw	15
   652  00062E  ECB0  F003         	call	_Lcd_SetBit
   653  000632                     
   654                           ;lcd.c: 108:    RD2 = 1;
   655  000632  8483               	bsf	3971,2,c	;volatile
   656  000634                     
   657                           ;lcd.c: 109:    for(int i=2130483; i<=0; i--) __nop();
   658  000634  0E82               	movlw	130
   659  000636  6E05               	movwf	(Lcd_Print_Char@i+1)^0,c
   660  000638  0E33               	movlw	51
   661  00063A  6E04               	movwf	Lcd_Print_Char@i^0,c
   662  00063C                     l67:
   663  00063C  F000               	nop	
   664  00063E  0604               	decf	Lcd_Print_Char@i^0,f,c
   665  000640  A0D8               	btfss	status,0,c
   666  000642  0605               	decf	(Lcd_Print_Char@i+1)^0,f,c
   667  000644  BE05               	btfsc	(Lcd_Print_Char@i+1)^0,7,c
   668  000646  EF2D  F003         	goto	u51
   669  00064A  5005               	movf	(Lcd_Print_Char@i+1)^0,w,c
   670  00064C  E108               	bnz	u50
   671  00064E  0404               	decf	Lcd_Print_Char@i^0,w,c
   672  000650  A0D8               	btfss	status,0,c
   673  000652  EF2D  F003         	goto	u51
   674  000656  EF2F  F003         	goto	u50
   675  00065A                     u51:
   676  00065A  EF1E  F003         	goto	l67
   677  00065E                     u50:
   678  00065E                     
   679                           ;lcd.c: 110:    RD2 = 0;
   680  00065E  9483               	bcf	3971,2,c	;volatile
   681  000660                     
   682                           ;lcd.c: 111:    Lcd_SetBit(Lower_Nibble);
   683  000660  5002               	movf	Lcd_Print_Char@Lower_Nibble^0,w,c
   684  000662  ECB0  F003         	call	_Lcd_SetBit
   685  000666                     
   686                           ;lcd.c: 112:    RD2 = 1;
   687  000666  8483               	bsf	3971,2,c	;volatile
   688  000668                     
   689                           ;lcd.c: 113:    for(int i=2130483; i<=0; i--) __nop();
   690  000668  0E82               	movlw	130
   691  00066A  6E07               	movwf	(Lcd_Print_Char@i_90+1)^0,c
   692  00066C  0E33               	movlw	51
   693  00066E  6E06               	movwf	Lcd_Print_Char@i_90^0,c
   694  000670                     l69:
   695  000670  F000               	nop	
   696  000672  0606               	decf	Lcd_Print_Char@i_90^0,f,c
   697  000674  A0D8               	btfss	status,0,c
   698  000676  0607               	decf	(Lcd_Print_Char@i_90+1)^0,f,c
   699  000678  BE07               	btfsc	(Lcd_Print_Char@i_90+1)^0,7,c
   700  00067A  EF47  F003         	goto	u61
   701  00067E  5007               	movf	(Lcd_Print_Char@i_90+1)^0,w,c
   702  000680  E108               	bnz	u60
   703  000682  0406               	decf	Lcd_Print_Char@i_90^0,w,c
   704  000684  A0D8               	btfss	status,0,c
   705  000686  EF47  F003         	goto	u61
   706  00068A  EF49  F003         	goto	u60
   707  00068E                     u61:
   708  00068E  EF38  F003         	goto	l69
   709  000692                     u60:
   710  000692                     
   711                           ;lcd.c: 114:    RD2 = 0;
   712  000692  9483               	bcf	3971,2,c	;volatile
   713  000694  0012               	return		;funcret
   714  000696                     __end_of_Lcd_Print_Char:
   715                           	callstack 0
   716                           
   717 ;; *************** function _Lcd_Clear *****************
   718 ;; Defined at:
   719 ;;		line 56 in file "lcd.c"
   720 ;; Parameters:    Size  Location     Type
   721 ;;		None
   722 ;; Auto vars:     Size  Location     Type
   723 ;;		None
   724 ;; Return value:  Size  Location     Type
   725 ;;                  1    wreg      void 
   726 ;; Registers used:
   727 ;;		wreg, status,2, cstack
   728 ;; Tracked objects:
   729 ;;		On entry : 0/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   733 ;;      Params:         0       0       0       0       0       0       0
   734 ;;      Locals:         0       0       0       0       0       0       0
   735 ;;      Temps:          0       0       0       0       0       0       0
   736 ;;      Totals:         0       0       0       0       0       0       0
   737 ;;Total ram usage:        0 bytes
   738 ;; Hardware stack levels used: 1
   739 ;; Hardware stack levels required when called: 2
   740 ;; This function calls:
   741 ;;		_Lcd_Cmd
   742 ;; This function is called by:
   743 ;;		_main
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747                           	psect	text5
   748  000896                     __ptext5:
   749                           	callstack 0
   750  000896                     _Lcd_Clear:
   751                           	callstack 28
   752  000896                     
   753                           ;lcd.c: 58:  Lcd_Cmd(0);
   754  000896  0E00               	movlw	0
   755  000898  EC34  F004         	call	_Lcd_Cmd
   756                           
   757                           ;lcd.c: 59:  Lcd_Cmd(1);
   758  00089C  0E01               	movlw	1
   759  00089E  EC34  F004         	call	_Lcd_Cmd
   760  0008A2  0012               	return		;funcret
   761  0008A4                     __end_of_Lcd_Clear:
   762                           	callstack 0
   763                           
   764 ;; *************** function _Lcd_Cmd *****************
   765 ;; Defined at:
   766 ;;		line 47 in file "lcd.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;  a               1    wreg     unsigned char 
   769 ;; Auto vars:     Size  Location     Type
   770 ;;  a               1    2[COMRAM] unsigned char 
   771 ;; Return value:  Size  Location     Type
   772 ;;                  1    wreg      void 
   773 ;; Registers used:
   774 ;;		wreg, status,2, cstack
   775 ;; Tracked objects:
   776 ;;		On entry : 0/0
   777 ;;		On exit  : 0/0
   778 ;;		Unchanged: 0/0
   779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   780 ;;      Params:         0       0       0       0       0       0       0
   781 ;;      Locals:         1       0       0       0       0       0       0
   782 ;;      Temps:          1       0       0       0       0       0       0
   783 ;;      Totals:         2       0       0       0       0       0       0
   784 ;;Total ram usage:        2 bytes
   785 ;; Hardware stack levels used: 1
   786 ;; Hardware stack levels required when called: 1
   787 ;; This function calls:
   788 ;;		_Lcd_SetBit
   789 ;; This function is called by:
   790 ;;		_Lcd_Clear
   791 ;;		_Lcd_Set_Cursor
   792 ;;		_Lcd_Start
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796                           	psect	text6
   797  000868                     __ptext6:
   798                           	callstack 0
   799  000868                     _Lcd_Cmd:
   800                           	callstack 28
   801                           
   802                           ;incstack = 0
   803                           ;Lcd_Cmd@a stored from wreg
   804  000868  6E03               	movwf	Lcd_Cmd@a^0,c
   805  00086A                     
   806                           ;lcd.c: 47: void Lcd_Cmd(char a);lcd.c: 48: {;lcd.c: 49:  RD0 = 0;
   807  00086A  9083               	bcf	3971,0,c	;volatile
   808  00086C                     
   809                           ;lcd.c: 50:  Lcd_SetBit(a);
   810  00086C  5003               	movf	Lcd_Cmd@a^0,w,c
   811  00086E  ECB0  F003         	call	_Lcd_SetBit
   812  000872                     
   813                           ;lcd.c: 51:  RD2 = 1;
   814  000872  8483               	bsf	3971,2,c	;volatile
   815  000874                     
   816                           ;lcd.c: 52:         _delay((unsigned long)((4)*(20000000/4000.0)));
   817  000874  0E1A               	movlw	26
   818  000876  6E02               	movwf	??_Lcd_Cmd^0,c
   819  000878  0EF8               	movlw	248
   820  00087A                     u167:
   821  00087A  2EE8               	decfsz	wreg,f,c
   822  00087C  D7FE               	bra	u167
   823  00087E  2E02               	decfsz	??_Lcd_Cmd^0,f,c
   824  000880  D7FC               	bra	u167
   825  000882  D000               	nop2	
   826  000884                     
   827                           ;lcd.c: 53:         RD2 = 0;
   828  000884  9483               	bcf	3971,2,c	;volatile
   829  000886  0012               	return		;funcret
   830  000888                     __end_of_Lcd_Cmd:
   831                           	callstack 0
   832                           
   833 ;; *************** function _Lcd_SetBit *****************
   834 ;; Defined at:
   835 ;;		line 24 in file "lcd.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;  data_bit        1    wreg     unsigned char 
   838 ;; Auto vars:     Size  Location     Type
   839 ;;  data_bit        1    0[COMRAM] unsigned char 
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   849 ;;      Params:         0       0       0       0       0       0       0
   850 ;;      Locals:         1       0       0       0       0       0       0
   851 ;;      Temps:          0       0       0       0       0       0       0
   852 ;;      Totals:         1       0       0       0       0       0       0
   853 ;;Total ram usage:        1 bytes
   854 ;; Hardware stack levels used: 1
   855 ;; This function calls:
   856 ;;		Nothing
   857 ;; This function is called by:
   858 ;;		_Lcd_Cmd
   859 ;;		_Lcd_Start
   860 ;;		_Lcd_Print_Char
   861 ;; This function uses a non-reentrant model
   862 ;;
   863                           
   864                           	psect	text7
   865  000760                     __ptext7:
   866                           	callstack 0
   867  000760                     _Lcd_SetBit:
   868                           	callstack 29
   869                           
   870                           ;incstack = 0
   871                           ;Lcd_SetBit@data_bit stored from wreg
   872  000760  6E01               	movwf	Lcd_SetBit@data_bit^0,c
   873  000762                     
   874                           ;lcd.c: 24: void Lcd_SetBit(char data_bit);lcd.c: 25: {;lcd.c: 26:  if(data_bit& 1)
   875  000762  A001               	btfss	Lcd_SetBit@data_bit^0,0,c
   876  000764  EFB6  F003         	goto	u11
   877  000768  EFB8  F003         	goto	u10
   878  00076C                     u11:
   879  00076C  EFBB  F003         	goto	l39
   880  000770                     u10:
   881  000770                     
   882                           ;lcd.c: 27:   RD4 = 1;
   883  000770  8883               	bsf	3971,4,c	;volatile
   884  000772  EFBC  F003         	goto	l757
   885  000776                     l39:
   886                           
   887                           ;lcd.c: 29:   RD4 = 0;
   888  000776  9883               	bcf	3971,4,c	;volatile
   889  000778                     l757:
   890                           
   891                           ;lcd.c: 31:  if(data_bit& 2)
   892  000778  A201               	btfss	Lcd_SetBit@data_bit^0,1,c
   893  00077A  EFC1  F003         	goto	u21
   894  00077E  EFC3  F003         	goto	u20
   895  000782                     u21:
   896  000782  EFC6  F003         	goto	l41
   897  000786                     u20:
   898  000786                     
   899                           ;lcd.c: 32:   RD5 = 1;
   900  000786  8A83               	bsf	3971,5,c	;volatile
   901  000788  EFC7  F003         	goto	l761
   902  00078C                     l41:
   903                           
   904                           ;lcd.c: 34:   RD5 = 0;
   905  00078C  9A83               	bcf	3971,5,c	;volatile
   906  00078E                     l761:
   907                           
   908                           ;lcd.c: 36:  if(data_bit& 4)
   909  00078E  A401               	btfss	Lcd_SetBit@data_bit^0,2,c
   910  000790  EFCC  F003         	goto	u31
   911  000794  EFCE  F003         	goto	u30
   912  000798                     u31:
   913  000798  EFD1  F003         	goto	l43
   914  00079C                     u30:
   915  00079C                     
   916                           ;lcd.c: 37:   RD6 = 1;
   917  00079C  8C83               	bsf	3971,6,c	;volatile
   918  00079E  EFD2  F003         	goto	l765
   919  0007A2                     l43:
   920                           
   921                           ;lcd.c: 39:   RD6 = 0;
   922  0007A2  9C83               	bcf	3971,6,c	;volatile
   923  0007A4                     l765:
   924                           
   925                           ;lcd.c: 41:  if(data_bit& 8)
   926  0007A4  A601               	btfss	Lcd_SetBit@data_bit^0,3,c
   927  0007A6  EFD7  F003         	goto	u41
   928  0007AA  EFD9  F003         	goto	u40
   929  0007AE                     u41:
   930  0007AE  EFDC  F003         	goto	l45
   931  0007B2                     u40:
   932  0007B2                     
   933                           ;lcd.c: 42:   RD7 = 1;
   934  0007B2  8E83               	bsf	3971,7,c	;volatile
   935  0007B4  EFDD  F003         	goto	l47
   936  0007B8                     l45:
   937                           
   938                           ;lcd.c: 44:   RD7 = 0;
   939  0007B8  9E83               	bcf	3971,7,c	;volatile
   940  0007BA                     l47:
   941  0007BA  0012               	return		;funcret
   942  0007BC                     __end_of_Lcd_SetBit:
   943                           	callstack 0
   944                           
   945                           	psect	rparam
   946  0000                     
   947                           	psect	idloc
   948                           
   949                           ;Config register IDLOC0 @ 0x200000
   950                           ;	unspecified, using default values
   951  200000                     	org	2097152
   952  200000  FF                 	db	255
   953                           
   954                           ;Config register IDLOC1 @ 0x200001
   955                           ;	unspecified, using default values
   956  200001                     	org	2097153
   957  200001  FF                 	db	255
   958                           
   959                           ;Config register IDLOC2 @ 0x200002
   960                           ;	unspecified, using default values
   961  200002                     	org	2097154
   962  200002  FF                 	db	255
   963                           
   964                           ;Config register IDLOC3 @ 0x200003
   965                           ;	unspecified, using default values
   966  200003                     	org	2097155
   967  200003  FF                 	db	255
   968                           
   969                           ;Config register IDLOC4 @ 0x200004
   970                           ;	unspecified, using default values
   971  200004                     	org	2097156
   972  200004  FF                 	db	255
   973                           
   974                           ;Config register IDLOC5 @ 0x200005
   975                           ;	unspecified, using default values
   976  200005                     	org	2097157
   977  200005  FF                 	db	255
   978                           
   979                           ;Config register IDLOC6 @ 0x200006
   980                           ;	unspecified, using default values
   981  200006                     	org	2097158
   982  200006  FF                 	db	255
   983                           
   984                           ;Config register IDLOC7 @ 0x200007
   985                           ;	unspecified, using default values
   986  200007                     	org	2097159
   987  200007  FF                 	db	255
   988                           
   989                           	psect	config
   990                           
   991                           ; Padding undefined space
   992  300000                     	org	3145728
   993  300000  FF                 	db	255
   994                           
   995                           ;Config register CONFIG1H @ 0x300001
   996                           ;	Oscillator Selection bits
   997                           ;	OSC = HS, HS oscillator
   998                           ;	Fail-Safe Clock Monitor Enable bit
   999                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1000                           ;	Internal/External Oscillator Switchover bit
  1001                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1002  300001                     	org	3145729
  1003  300001  02                 	db	2
  1004                           
  1005                           ;Config register CONFIG2L @ 0x300002
  1006                           ;	Power-up Timer Enable bit
  1007                           ;	PWRT = OFF, PWRT disabled
  1008                           ;	Brown-out Reset Enable bits
  1009                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  1010                           ;	Brown Out Reset Voltage bits
  1011                           ;	BORV = 3, Minimum setting
  1012  300002                     	org	3145730
  1013  300002  19                 	db	25
  1014                           
  1015                           ;Config register CONFIG2H @ 0x300003
  1016                           ;	Watchdog Timer Enable bit
  1017                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1018                           ;	Watchdog Timer Postscale Select bits
  1019                           ;	WDTPS = 32768, 1:32768
  1020  300003                     	org	3145731
  1021  300003  1E                 	db	30
  1022                           
  1023                           ; Padding undefined space
  1024  300004                     	org	3145732
  1025  300004  FF                 	db	255
  1026                           
  1027                           ;Config register CONFIG3H @ 0x300005
  1028                           ;	CCP2 MUX bit
  1029                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1030                           ;	PORTB A/D Enable bit
  1031                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  1032                           ;	Low-Power Timer1 Oscillator Enable bit
  1033                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1034                           ;	MCLR Pin Enable bit
  1035                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  1036  300005                     	org	3145733
  1037  300005  03                 	db	3
  1038                           
  1039                           ;Config register CONFIG4L @ 0x300006
  1040                           ;	Stack Full/Underflow Reset Enable bit
  1041                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1042                           ;	Single-Supply ICSP Enable bit
  1043                           ;	LVP = ON, Single-Supply ICSP enabled
  1044                           ;	Extended Instruction Set Enable bit
  1045                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1046                           ;	Background Debugger Enable bit
  1047                           ;	DEBUG = 0x1, unprogrammed default
  1048  300006                     	org	3145734
  1049  300006  85                 	db	133
  1050                           
  1051                           ; Padding undefined space
  1052  300007                     	org	3145735
  1053  300007  FF                 	db	255
  1054                           
  1055                           ;Config register CONFIG5L @ 0x300008
  1056                           ;	Code Protection bit
  1057                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1058                           ;	Code Protection bit
  1059                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1060                           ;	Code Protection bit
  1061                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1062                           ;	Code Protection bit
  1063                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1064  300008                     	org	3145736
  1065  300008  0F                 	db	15
  1066                           
  1067                           ;Config register CONFIG5H @ 0x300009
  1068                           ;	Boot Block Code Protection bit
  1069                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1070                           ;	Data EEPROM Code Protection bit
  1071                           ;	CPD = OFF, Data EEPROM not code-protected
  1072  300009                     	org	3145737
  1073  300009  C0                 	db	192
  1074                           
  1075                           ;Config register CONFIG6L @ 0x30000A
  1076                           ;	Write Protection bit
  1077                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1078                           ;	Write Protection bit
  1079                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1080                           ;	Write Protection bit
  1081                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1082                           ;	Write Protection bit
  1083                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1084  30000A                     	org	3145738
  1085  30000A  0F                 	db	15
  1086                           
  1087                           ;Config register CONFIG6H @ 0x30000B
  1088                           ;	Configuration Register Write Protection bit
  1089                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1090                           ;	Boot Block Write Protection bit
  1091                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  1092                           ;	Data EEPROM Write Protection bit
  1093                           ;	WRTD = OFF, Data EEPROM not write-protected
  1094  30000B                     	org	3145739
  1095  30000B  E0                 	db	224
  1096                           
  1097                           ;Config register CONFIG7L @ 0x30000C
  1098                           ;	Table Read Protection bit
  1099                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1100                           ;	Table Read Protection bit
  1101                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1102                           ;	Table Read Protection bit
  1103                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1104                           ;	Table Read Protection bit
  1105                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1106  30000C                     	org	3145740
  1107  30000C  0F                 	db	15
  1108                           
  1109                           ;Config register CONFIG7H @ 0x30000D
  1110                           ;	Boot Block Table Read Protection bit
  1111                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1112  30000D                     	org	3145741
  1113  30000D  40                 	db	64
  1114                           tosu	equ	0xFFF
  1115                           tosh	equ	0xFFE
  1116                           tosl	equ	0xFFD
  1117                           stkptr	equ	0xFFC
  1118                           pclatu	equ	0xFFB
  1119                           pclath	equ	0xFFA
  1120                           pcl	equ	0xFF9
  1121                           tblptru	equ	0xFF8
  1122                           tblptrh	equ	0xFF7
  1123                           tblptrl	equ	0xFF6
  1124                           tablat	equ	0xFF5
  1125                           prodh	equ	0xFF4
  1126                           prodl	equ	0xFF3
  1127                           indf0	equ	0xFEF
  1128                           postinc0	equ	0xFEE
  1129                           postdec0	equ	0xFED
  1130                           preinc0	equ	0xFEC
  1131                           plusw0	equ	0xFEB
  1132                           fsr0h	equ	0xFEA
  1133                           fsr0l	equ	0xFE9
  1134                           wreg	equ	0xFE8
  1135                           indf1	equ	0xFE7
  1136                           postinc1	equ	0xFE6
  1137                           postdec1	equ	0xFE5
  1138                           preinc1	equ	0xFE4
  1139                           plusw1	equ	0xFE3
  1140                           fsr1h	equ	0xFE2
  1141                           fsr1l	equ	0xFE1
  1142                           bsr	equ	0xFE0
  1143                           indf2	equ	0xFDF
  1144                           postinc2	equ	0xFDE
  1145                           postdec2	equ	0xFDD
  1146                           preinc2	equ	0xFDC
  1147                           plusw2	equ	0xFDB
  1148                           fsr2h	equ	0xFDA
  1149                           fsr2l	equ	0xFD9
  1150                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     16      16
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    Lcd_Print_String@a	PTR unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[11]), STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Print_String
    _Lcd_Start->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Print_String->_Lcd_Print_Char
    _Lcd_Print_Char->_Lcd_SetBit
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_SetBit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1159
                                             14 COMRAM     2     2      0
                          _Lcd_Clear
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                          _Lcd_Start
 ---------------------------------------------------------------------------------
 (1) _Lcd_Start                                            3     3      0     165
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     497
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Print_String                                     6     4      2     422
                                              8 COMRAM     6     4      2
                     _Lcd_Print_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Print_Char                                       7     7      0     180
                                              1 COMRAM     7     7      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (2) _Lcd_SetBit                                           1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_SetBit
   _Lcd_Print_String
     _Lcd_Print_Char
       _Lcd_SetBit
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Start
     _Lcd_Cmd
     _Lcd_SetBit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     10      10       1       12.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sun Oct 17 18:59:31 2021

                        l41 078C                          l50 0886                          l43 07A2  
                        l45 07B8                          l53 08A2                          l70 0692  
                        l47 07BA                          l39 0776                          l71 0694  
                        l64 075E                          l67 063C                          l59 06FA  
                        l68 065E                          l69 0670                          l77 0866  
                        u10 0770                          u11 076C                          u20 0786  
                        u21 0782                          u30 079C                          u31 0798  
                        u40 07B2                          u41 07AE                          u50 065E  
                        u51 065A                          u60 0692                          u61 068E  
                       l801 0668                         l811 06FC                         l901 06F4  
                       l813 0702                         l807 0672                         l903 0812  
                       l831 0734                         l823 0702                         l815 0702  
                       l911 07BC                         l761 078E                         l753 0762  
                       l809 0678                         l905 081E                         l841 0752  
                       l833 073A                         l825 0708                         l921 07DE  
                       l913 07C0                         l763 079C                         l755 0770  
                       l771 086C                         l907 083A                         l843 0758  
                       l835 0740                         l827 0718                         l923 07E8  
                       l915 07C4                         l765 07A4                         l757 0778  
                       l773 0872                         l845 0896                         l781 0628  
                       l909 083E                         l837 0746                         l829 072E  
                       l925 07F4                         l917 07C8                         l767 07B2  
                       l759 0786                         l775 0874                         l783 062A  
                       l839 074C                         l919 07D2                         l777 0884  
                       l769 086A                         l793 063E                         l785 0632  
                       l795 0644                         l787 0634                         l779 061C  
                       l891 06BA                         l797 0660                         l893 06C0  
                       l799 0666                         l895 06CA                         l887 0698  
                       l897 06DC                         l889 06A8                         l899 06EE  
                       _RD0 007C18                         _RD2 007C1A                         u100 06A8  
                       _RD4 007C1C                         u101 06A4                         _RD5 007C1D  
                       u110 06DC                         _RD6 007C1E                         u111 06D8  
                       _RD7 007C1F                         u120 0866                         u121 0862  
                       u137 07FE                         u147 070E                         u157 0724  
                       u167 087A                         wreg 000FE8                        STR_1 0601  
                      STR_2 060D                        _main 07BC                        start 0000  
        Lcd_Print_Char@i_90 0006          Lcd_Print_Char@data 0008             __end_of_Lcd_Cmd 0888  
              ___param_bank 000000                  _Lcd_SetBit 0760                       ?_main 0001  
   __size_of_Lcd_Set_Cursor 0066                       _TRISD 000F95                       tablat 000FF5  
 __size_of_Lcd_Print_String 0056                       status 000FD8     __size_of_Lcd_Print_Char 007C  
           __initialization 0888                __end_of_main 0812                      ??_main 000F  
        __size_of_Lcd_Clear 000E               __activetblptr 000001          __size_of_Lcd_Start 0064  
                 ??_Lcd_Cmd 0002                 ?_Lcd_SetBit 0001                      isa$std 000001  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8             Lcd_Set_Cursor@a 0005             Lcd_Set_Cursor@b 0004  
           Lcd_Set_Cursor@y 0007             Lcd_Set_Cursor@z 0006                  __accesstop 0080  
   __end_of__initialization 0888           __end_of_Lcd_Clear 08A4               ___rparam_used 000001  
         __end_of_Lcd_Start 0760              __pcstackCOMRAM 0001              _Lcd_Set_Cursor 0696  
          _Lcd_Print_String 0812         __size_of_Lcd_SetBit 005C              _Lcd_Print_Char 061A  
        Lcd_SetBit@data_bit 0001      __end_of_Lcd_Set_Cursor 06FC             Lcd_Print_Char@i 0004  
                   _Lcd_Cmd 0868      __end_of_Lcd_Print_Char 0696                     __Hparam 0000  
                   __Lparam 0000                __psmallconst 0600                     __pcinit 0888  
                   __ramtop 0600             ?_Lcd_Set_Cursor 0004                     __ptext0 07BC  
                   __ptext1 06FC                     __ptext2 0696                     __ptext3 0812  
                   __ptext4 061A                     __ptext5 0896                     __ptext6 0868  
                   __ptext7 0760        end_of_initialization 0888             ?_Lcd_Print_Char 0001  
              ??_Lcd_SetBit 0001          __end_of_Lcd_SetBit 07BC                   _Lcd_Clear 0896  
                 _Lcd_Start 06FC    __end_of_Lcd_Print_String 0868         start_initialization 0888  
         Lcd_Print_String@a 0009           Lcd_Print_String@i 000D                  ?_Lcd_Clear 0001  
                ?_Lcd_Start 0001  Lcd_Print_Char@Lower_Nibble 0002                    ?_Lcd_Cmd 0001  
          ??_Lcd_Set_Cursor 0005                 __smallconst 0600            ??_Lcd_Print_Char 0002  
                  Lcd_Cmd@a 0003                 ??_Lcd_Clear 0004                 ??_Lcd_Start 0004  
          __size_of_Lcd_Cmd 0020                    __Hrparam 0000                    __Lrparam 0000  
              __Lsmallconst 0600           ?_Lcd_Print_String 0009          ??_Lcd_Print_String 000B  
             __size_of_main 0056                    isa$xinst 000000  Lcd_Print_Char@Upper_Nibble 0003  
        Lcd_Set_Cursor@temp 0008  
